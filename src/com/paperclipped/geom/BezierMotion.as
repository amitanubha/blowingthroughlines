package com.paperclipped.geom{	import flash.geom.Point;		public class BezierMotion	{		public static const X:String = "x";		public static const Y:String = "y";				public function BezierMotion():void		{			throw new Error("This is a static class, no need ot instantiate it!");		}				/**		 * Gets point along a Quadratic bezier curve.		 * 		 * @param startPt	start point of bezier		 * @param endPt		end point of bezier		 * @param controlPt	control point of bezier		 * @param time		percentage along the curve to find the point on		 * @return			A Point object along the curve		 * 		 * @see Point		 */		public static function getLocation(startPt:Point, endPt:Point, controlPt:Point, time:Number):Point		{			var loc:Point = new Point();						loc.x = bezierLoc(startPt.x, endPt.x, controlPt.x, time);			loc.y = bezierLoc(startPt.y, endPt.y, controlPt.y, time);			return loc;		}			/**		 * Gets the other axis for a point along a quadratic bezier curve.		 * 		 * @param startPt	start point of bezier		 * @param endPt		end point of bezier		 * @param controlPt	control point of bezier		 * @param loc		x or y location between start and end point		 * @return			Returns value of other axis		 * 		 * @see Point		 */			//		public static function getRelativeLocation(startPt:Point, endPt:Point, controlPt:Point, loc:int):Number//		{//				var time:Number = bezierPercent(startPt, endPt, controlPt, loc);//				return bezierLoc(startPt.x, endPt.x, controlPt.x, time);//		}				private static function bezierLoc(p1:int, p2:int, pc:int, t:Number):Number		{			return p1*(1-t)*(1-t)+2*pc*(1-t)*t+p2*t*t;		}		//		private static function bezierPercent(p1:int, p2:int, pc:int, loc:int):Number//		{//			return -(pc - p1 + Math.sqrt(pc^2-p2*p1-2*pc*loc+p2*loc+p1*loc)/(-2*pc+p2+p1);//		}				/**		 * Gets rotation of an object along a  Quadratic bezier curve.		 * 		  * @param startPt	start point of bezier		 * @param endPt		end point of bezier		 * @param controlPt	control point of bezier		 * @param time		percentage along the curve to find the point on		 * @param offset	how far ahead to look for the rotation		 * @return			Number in degrees of rotation		 * 		 * @see Point		 */				public static function getRotation(startPt:Point, endPt:Point, controlPt:Point, time:Number, offset:Number=0.05):Number		{			var currentLoc:Point 	= getLocation(startPt, endPt, controlPt, time);			var angleLoc:Point 		= getLocation(startPt, endPt, controlPt, time-offset);						var dx:Number = currentLoc.x - angleLoc.x;			var dy:Number = currentLoc.y - angleLoc.y						var rot:Number = Math.atan2(dy, dx)*180/Math.PI;			return rot;		}	}}