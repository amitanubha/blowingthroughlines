package com.paperclipped.ui{	import flash.display.*;	import flash.geom.*;	import flash.events.*;	public class MaskedSlider extends Sprite	{		public static const UP_DOWN = 1;		public static const LEFT_RIGHT = 2;		public static const EVENT_ON_CHANGE = "change";				public var itemContainer:Sprite;		public var sItem;		public var itemIndex;		private var mywidth:Number, myheight:Number, mytype:Number;		private var startmouse;		//private var topcont:Sprite;		private var back:Sprite;		private var speed:Number;			public function MaskedSlider(width:Number,height:Number,type:Number=UP_DOWN,color:uint=0xFFFFFF,sped:Number=6,hitW:Number=40,hitH:Number=40)		{			speed=sped;			mywidth=width;			myheight=height;			mytype=type;			trace(width, height,type);			back = background(color);			itemContainer = new Sprite();			itemContainer.name = "itemc";			var mymask:Sprite = this.background(0xFFFFFF);			this.addChild(back);			this.graphics.beginFill(color);			this.graphics.drawRect(0,0,mywidth,myheight);;			this.graphics.endFill();			this.addChild(itemContainer);			this.addChild(mymask);			itemContainer.mask = mymask;			startmouse=0;			var square:Sprite = new Sprite();			square.graphics.beginFill(0xCCFF00);			square.graphics.drawRect(0, 0, width+hitW, height+hitH);			square.alpha = 0;			this.addChildAt(square,0);			square.y=-hitH/2;			square.x=-hitW/2;			this.hitArea = square;			square.mouseChildren=true;			this.addEventListener(MouseEvent.MOUSE_OVER, startMove);			this.addEventListener(MouseEvent.MOUSE_OUT, stopMove);		}		public function setSpeed(sped:Number)		{			speed=sped;		}		private function background(color:uint)		{			var s:Sprite = new Sprite();			s.graphics.beginFill(color);			s.graphics.drawRect(0,0,mywidth,myheight);			s.graphics.endFill();			//s.buttonMode=true;			return s;		}		public function stopMove(e:Event)		{			this.removeEventListener(Event.ENTER_FRAME,moveIt);		}		public function startMove(e:Event)		{			this.addEventListener(Event.ENTER_FRAME, moveIt);		}		public function moveIt(e:Event)		{			var amt:Number;			var bm:Number;			var d:Number;			if(mytype==MaskedSlider.UP_DOWN){				if (back.height<itemContainer.height) {					amt = back.height/5;					bm = back.mouseY;					if (bm < amt*2) {						 d = Math.pow(1+((2*amt-bm)/back.height),speed);						if (itemContainer.y+d<0) {							itemContainer.y+=d;						} else {							itemContainer.y=0;						}											} else if (bm > 3*amt) {						d = Math.pow(1+Math.abs(((3*amt-bm)/back.height)),speed);						var miny:Number = back.height - itemContainer.height;						if (itemContainer.y-d>=miny) {							itemContainer.y-=d;						} else {							itemContainer.y=miny;						}					}				}			}else{				if (back.width<itemContainer.width) {					amt = back.width/5;					bm = back.mouseX;					if (bm < amt*2) {						 d = Math.pow(1+((2*amt-bm)/back.width),speed);						if (itemContainer.x+d<0) {							itemContainer.x+=d;						} else {							itemContainer.x=0;						}											} else if (bm > 3*amt) {						d = Math.pow(1+Math.abs(((3*amt-bm)/back.width)),speed);						var minx:Number = back.width - itemContainer.width;						if (itemContainer.x-d>=minx) {							itemContainer.x-=d;						} else {							itemContainer.x=minx;						}					}				}			}					}				public function addItem(clip:MovieClip,rOver:Function=undefined,rOut:Function=undefined)		{						var offset:Point = new Point(itemContainer.width, itemContainer.height);			var localclip:MovieClip = clip;			localclip.gotoAndStop(1);			localclip.buttonMode = true;			localclip.mouseChildren = false;			localclip.addEventListener(MouseEvent.ROLL_OVER, rOver);				localclip.addEventListener(MouseEvent.ROLL_OUT , rOut);			localclip.addEventListener(MouseEvent.CLICK, onClick);			itemContainer.addChild(localclip);			if(mytype==MaskedSlider.UP_DOWN){			localclip.y=offset.y;			}else{				localclip.x=offset.x;			}		}				public function empty():void		{			while(this.itemContainer.numChildren>0){				this.itemContainer.removeChildAt(0);			}		}				public function onClick(evt:Event)		{			sItem = evt.target;			dispatchEvent(new Event(EVENT_ON_CHANGE));			//trace(evt.target);			for(var i = 0;i< this.itemContainer.numChildren;i++){				if(itemContainer.getChildAt(i)==sItem){					this.itemIndex=i;					//trace(itemIndex);				}			}								}				public function getClip():Sprite {			return this;		}				public function setDefaultSelect(itemNumber:Number)		{			sItem = itemContainer.getChildAt(itemNumber);						for(var i = 0;i< this.itemContainer.numChildren;i++){				if(itemContainer.getChildAt(i)==sItem){					this.itemIndex=i;				}			}			dispatchEvent(new Event(EVENT_ON_CHANGE));			//trace(evt.target);					}			}}