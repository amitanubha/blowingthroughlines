package com.paperclipped.ui{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.filters.DropShadowFilter;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.utils.Timer;	/**	 * 	 * 	 * 	 */		public class ToolTip extends Sprite	{		private var _color:uint;		private var _dropShadow:DropShadowFilter;		private var _roundedRadius:Number;		private var _padding:Number;		private var _w:Number;		private var _h:Number		private var _fontSize:Number;		private var _alpha:Number;		private var _pointerWidth:Number;		private var _pointerHeight:Number;		private var _bubble:Sprite;		private var _pointer:Sprite;		private var _pointerBounds:Rectangle;		private var _distance:Number;		private var _isAddedToStage:Boolean;		private var _hoverTimer:Timer;		private var _hoverTime:Number		private var _fontColor:uint;		private var _font:String;				private var _alt:String;		private var _tf:TextField;						/**		 * Time in milliseconds that determines how long the mouse must hover before the ToolTip appears.		 */				public function get hoverTime():int				{	return _hoverTime;		}		public function set hoverTime(val:int):void		{	_hoverTime = val;		}				/**		 * 		 * @param alt					The String to populate the ToolTip with.		 * @param color					The color of the ToolTip background		 * @param tipAlpha				The alpha of the ToolTip background		 * @param bubbleWidth			The widtb of the ToolTip background		 * @param roundedRadius			The rounded corner radius of the ToolTip background		 * @param padding				The padding of the ToolTip background from the ToolTip text		 * @param fontColor				The font color of the ToolTip text		 * @param fontSize				The font size of the ToolTip text		 * @param font					The font of the ToolTip text		 * @param pointerHeight			The height of the pointer/sprout of the ToolTip background		 * @param pointerWidth			The width of the pointer/sprout of the ToolTip background		 * @param mouseDistance			The distance of the ToolTip from the mouse (specifically the distance from the tip of the pointer/sprout)		 * @param hoverTimeToActivate	The time in milliseconds that it takes for the ToolTip to appear when over an object		 * 		 */				public function ToolTip(	alt:String = "This is a tooltip!",									color:uint = 0x8EC543,									tipAlpha:Number = 1,									bubbleWidth:Number = 100,									roundedRadius:Number = 5,									padding:Number = 5,									fontColor:uint = 0xffffff,									fontSize:Number = 11,									font:String = "Helvetica",									pointerHeight:Number = 8,									pointerWidth:Number = 7,									mouseDistance:Number = 4,									hoverTimeToActivate:Number = 1000	)		{						_color				= color;			_roundedRadius		= roundedRadius;			_padding			= padding;			_w					= bubbleWidth;			_fontSize			= fontSize;			_alpha				= tipAlpha;			_pointerHeight		= pointerHeight;			_pointerWidth		= pointerWidth;			_distance			= mouseDistance;			_hoverTime			= hoverTimeToActivate;			_font				= font;			_fontColor			= fontColor;			_alt				= alt;						init();		}				private function init():void		{			this.mouseChildren	= false;			this.mouseEnabled	= false;						_bubble		= new Sprite();			_pointer	= new Sprite();						_hoverTimer	= new Timer( _hoverTime );			_hoverTimer.addEventListener( TimerEvent.TIMER, handleTimer );						this.addChild( _bubble );			this.addChild( _pointer );									_tf			= new TextField();			_tf.defaultTextFormat	= new TextFormat( _font, _fontSize, _fontColor, null, null, null, null, null, "center" );			_tf.autoSize	= TextFieldAutoSize.LEFT;			_tf.width		= _w;			_tf.wordWrap	= true;			_tf.multiline	= true;			_tf.x			= _padding;			_tf.y			= _padding;			_tf.text		= _alt;			_h				= _tf.height;						_bubble.addChild( _tf );						_dropShadow		= new DropShadowFilter(1, 90, 0, 0.5, 6, 6, 1); // TODO: Make the tooltip dropdown definable (or some props of it anyway).			this.filters 	= [_dropShadow];						this.addEventListener( Event.ADDED_TO_STAGE, handleAddedToStage );		}				/**		 * 		 * @param string The string to update the ToolTip's TextField with.		 * 		 * Changes the ToolTip's displayed text.		 * 		 */				public function changeText( string:String ):void		{			_alt			= string;			_tf.text		= _alt;			_tf.width		= _w;			_h				= _tf.height;						draw();		}				/**		 *		 * Starts the timer with the delay of the hoverTime property. When the timer fires, the ToolTip will be visible. 		 * 		 */				public function show():void		{			_hoverTimer.reset();			_hoverTimer.start();		}				/**		 *		 * Stops the hover timer and makes the ToolTip invisible if it isn't already. 		 * 		 */				public function hide():void		{			_hoverTimer.stop();			if( _pointer.visible )			{				_pointer.visible	= false;				_bubble.visible		= false;				if( this.hasEventListener( Event.ENTER_FRAME ) )	this.removeEventListener( Event.ENTER_FRAME, handleEnterFrame );			}		}				private function draw():void		{			_bubble.graphics.clear();			_bubble.graphics.beginFill( _color, _alpha );			_bubble.graphics.drawRoundRect( 0, 0, _w + _padding*2, _h + _padding*2, _roundedRadius*2, _roundedRadius*2 );;			_bubble.graphics.endFill();						_pointerBounds	= new Rectangle( _roundedRadius, _bubble.height, _bubble.width - _roundedRadius*2 - _pointerWidth, 0 );						_pointer.graphics.clear();			_pointer.graphics.beginFill( _color, _alpha );			_pointer.graphics.moveTo( _pointerWidth, 0 );			_pointer.graphics.lineTo( 0, _pointerHeight );			_pointer.graphics.lineTo( 0, 0 );			_pointer.graphics.endFill();						_pointer.y		= _pointerBounds.y;		}				private function update( pointerLocationRatio:Number ):void		{			_pointer.x		= _pointerBounds.x + _pointerBounds.width * pointerLocationRatio;							this.x		= this.parent.mouseX - _pointer.x;;			this.y		= this.parent.mouseY - ( _pointer.height + _pointer.y + _distance );						_pointer.visible	= true;			_bubble.visible		= true;		}				private function handleEnterFrame( evt:Event ):void		{			if( _isAddedToStage )			{				var ratio:Number	= this.stage.mouseX / this.stage.stageWidth;				update( ratio );			}		}				private function handleAddedToStage( evt:Event ):void		{			_isAddedToStage		= true;			draw();		}				private function handleTimer( evt:TimerEvent ):void		{			_hoverTimer.stop();			this.addEventListener( Event.ENTER_FRAME, handleEnterFrame );		}			}}