package com.paperclipped.utils{	/*	*	Saved from http://www.ultrashock.com/blog/nutrox/colour-manipulation-functions-6.html	*	Page was removed, no Copyright was specified. 2008	*	*	Modified and made functions static.	*/	public class ColorManipulator	{		//This function will split a RGB colour into it's component colour channels:		public static function splitRGBChannels( colour:uint ):Object		{		    var channels:Object = {};    		    channels.red = colour >> 16 & 255;		    channels.green = colour >> 8 & 255;		    channels.blue = colour & 255;    		    return channels;		} 		// Example		/* 		*	var colour:uint = 0xEA8020;		*	var channels:Object = splitRGBChannels( colour );		*	 		*	trace( channels.red );   // 234		*	trace( channels.green ); // 128		*	trace( channels.blue );  // 32 		*/				//Similar to the previous function, but this one splits an ARGB colour:		public static function splitARGBChannels( colour:uint ):Object		{		    var channels:Object = {};    		    channels.alpha = colour >>> 24 & 255;		    channels.red = colour >> 16 & 255;		    channels.green = colour >> 8 & 255;		    channels.blue = colour & 255;    		    return channels;		} 		// Example		/* 		*	var colour:uint = 0xFFEA8020;		*	var channels:Object = splitARGBChannels( colour ); 		*	trace( channels.alpha ); // 255		*	trace( channels.red );   // 234		*	trace( channels.green ); // 128		*	trace( channels.blue );  // 32 		*/ 		//This function will take an Object containing red, green, and blue colour channels, and combine them into a RGB colour value:		public static function combineRGBChannels( channels:Object ):uint		{		    var colour:uint = 0;    		    colour |= channels.red << 16;		    colour |= channels.green << 8;		    colour |= channels.blue;    		    return colour;		} 		// Example		/* 		*	var channels:Object = {};		*	channels.red = 255;		*	channels.green = 128;		*	channels.blue = 10;		*	 		*	var colour:uint = combineRGBChannels( channels );		*	 		*	trace( colour.toString(16) ); // ff800a 		*/ 		//Similar to the previous function, but this function combines alpha, red, green, and blue colour channels:		public static function combineARGBChannels( channels:Object ):uint		{		    var colour:uint = 0;    		    colour |= channels.alpha << 24;		    colour |= channels.red << 16;		    colour |= channels.green << 8;		    colour |= channels.blue;    		    return colour;		} 		// Example		/* 		*	var channels:Object = {};		*	channels.alpha = 255;		*	channels.red = 200;		*	channels.green = 128;		*	channels.blue = 10;		*			*	var colour:uint = combineARGBChannels( channels );		*			*	trace( colour.toString(16) ); // ffc8800a 		*/ 		//This function will brighten a RGB or ARGB colour. The "amount" is a value between 0.0 and 1.0 where 0.0 will return the original colour, and 1.0 will return FFFFFF:		public static function brighten( colour:uint, amount:Number ):uint		{		    var a:int = colour >>> 24 & 255;		    var r:int = colour >> 16 & 255;		    var g:int = colour >> 8 & 255;		    var b:int = colour & 255;		    var x:int = 255 - Math.min( r, g, b );    		    r += x * amount;		    g += x * amount;		    b += x * amount;    		    if( r > 255 )		    {		        r = 255;		    }    		    if( g > 255 )		    {		        g = 255;		    }    		    if( b > 255 )		    {		        b = 255;		    }    		    return ( a << 24 ) | ( r << 16 ) | ( g << 8 ) | b;		} 		// Example		/* 		*	var colour:uint = 0x336699;		*	colour = brighten( colour, 0.5 );		*	 		*	trace( colour.toString(16) ); // 99ccff 		*/ 		//Finally, this function will darken a RGB or ARGB colour. The "amount" is a value between 0.0 and 1.0 where 0.0 will return the original colour, and 1.0 will return 000000:		public static function darken( colour:uint, amount:Number ):uint		{		    var a:int = colour >>> 24 & 255;		    var r:int = colour >> 16 & 255;		    var g:int = colour >> 8 & 255;		    var b:int = colour & 255;		    var x:int = Math.max( r, g, b );    		    r -= x * amount;		    g -= x * amount;		    b -= x * amount;    		    if( r < 0 )		    {		        r = 0;		    }    		    if( g < 0 )		    {		        g = 0;		    }    		    if( b < 0 )		    {		        b = 0;		    }    		    return ( a << 24 ) | ( r << 16 ) | ( g << 8 ) | b;		} 		// Example		/* 		*	var colour:uint = 0xCCDDEE;		*	colour = darken( colour, 0.5 );*/		}}