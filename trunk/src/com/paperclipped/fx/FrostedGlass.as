/** *	Frosted Glass v0.1 *	http://blowingthroughlines.com/ * *	Description: *	Now you don't have to install Windows Vista™ to enjoy gratuitous use of the  *	"frosted glass"	effect. Though if you want the users to visit your site,  *	you'll use it sparingly. *	 *	The effect distance based so just like real glass (and begging to be tried with *	papervision3D), so the farther away it is, the more blurry the item behind it is. *	It even has a dropshadow by default that can be overridden.  * *	No external classes are needed. * *	@example var myGlass:FrostedGlass = FrostedGlass(displayObjectToBlurOut, liveUpdate=false, color=0xFFFFFF, distance=10); * *	color, pane (the shape of the glass), distance, and maxDistance (to limit when the glass goes opaque) *	are publicly available. * *	If liveUpdate is off, you can simply call: *	myGlass.update();  *	to redraw the the glass with the new settings (like the slider example in the demo). *	 *	@author Collin Reisdorf *	 *	MIT License: *	Copyright (c) 2007-2008 Collin Reisdorf *	 *	Permission is hereby granted, free of charge, to any person obtaining a copy *	of this software and associated documentation files (the "Software"), to deal *	in the Software without restriction, including without limitation the rights *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell *	copies of the Software, and to permit persons to whom the Software is *	furnished to do so, subject to the following conditions: *	 *	The above copyright notice and this permission notice shall be included in *	all copies or substantial portions of the Software. *	 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN *	THE SOFTWARE. */package com.paperclipped.fx{	import flash.display.*;	import flash.net.*;	import flash.filters.*;	import flash.events.*;	import flash.utils.Timer;		import flash.filters.BlurFilter;	import flash.filters.DropShadowFilter;	import flash.display.Bitmap;	import flash.display.BitmapData;		public class FrostedGlass extends Sprite	{		private var source:DisplayObject;		private var liveUpdate:Boolean;		private var bmp:Bitmap;		private var bmpData:BitmapData;		private var blur:BlurFilter;				public var shadow:DropShadowFilter;		public var pane:Shape;		public var color:Number; // if the glass is colored, defaults to white		//public var opacity:Number; // how transparent the both shapes on the glass is				public var distance:Number;		public var maxDistance:Number;				public function FrostedGlass(src:DisplayObject, a:Boolean=false, c:Number=0xFFFFFF, d:Number=10):void		{			source = src			liveUpdate = a;			color = c;			distance = d;						maxDistance = 40;						//opacity = 0.6; // top alpha = opacity+0.2;						trace("loaded frosted glass");						init();		}				private function init():void		{			if(distance < 1) distance = 1;			blur  = new BlurFilter(distance, distance, BitmapFilterQuality.HIGH);			shadow = new DropShadowFilter(0, 0, 0x000000, 0.5, distance*2, distance*2, 0.5, BitmapFilterQuality.HIGH);						bmp = new Bitmap();			this.addChild(bmp);						addGlass();			update();						if(liveUpdate) source.addEventListener(Event.ENTER_FRAME, update);					}			// adds the colored (default white) tint to the glass		public function addGlass():void		{			pane = new Shape();			pane.graphics.beginFill(color, 1);			pane.graphics.drawRect(0,0, 50, 50);			pane.graphics.endFill();			this.addChild(pane);						// could maybe better as a color transform, to allow magic electric colorwheel...			// though that might be better handled outside of this class...		}				// updates the glass		public function update(evt:Event=null):void		{						pane.width = source.width;			pane.height = source.height;						blur.blurX = blur.blurY = distance;			shadow.blurX = shadow.blurY = distance*2;						pane.alpha = distance/maxDistance;						if(bmpData) bmpData.dispose();			bmpData = new BitmapData(source.width, source.height, true, 0x00);			bmpData.draw(source);			bmp.filters = [blur];			bmp.bitmapData = bmpData;						this.filters = [shadow];		}				// basically need to make the bitmap, then redraw it whenever there is a change in the bg (size location or image)		// and on top of that i need to use ColorTransform to change the tint of the glass, (white usually)			}// end of class}